// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "avito-segment/models"
	reflect "reflect"
	time "time"

	gomock "github.com/golang/mock/gomock"
)

// MockAvitoSegment is a mock of AvitoSegment interface.
type MockAvitoSegment struct {
	ctrl     *gomock.Controller
	recorder *MockAvitoSegmentMockRecorder
}

// MockAvitoSegmentMockRecorder is the mock recorder for MockAvitoSegment.
type MockAvitoSegmentMockRecorder struct {
	mock *MockAvitoSegment
}

// NewMockAvitoSegment creates a new mock instance.
func NewMockAvitoSegment(ctrl *gomock.Controller) *MockAvitoSegment {
	mock := &MockAvitoSegment{ctrl: ctrl}
	mock.recorder = &MockAvitoSegmentMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvitoSegment) EXPECT() *MockAvitoSegmentMockRecorder {
	return m.recorder
}

// Create mocks base method.
func (m *MockAvitoSegment) Create(segment models.Segment) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", segment)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Create indicates an expected call of Create.
func (mr *MockAvitoSegmentMockRecorder) Create(segment interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockAvitoSegment)(nil).Create), segment)
}

// Delete mocks base method.
func (m *MockAvitoSegment) Delete(slug string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", slug)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete.
func (mr *MockAvitoSegmentMockRecorder) Delete(slug interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockAvitoSegment)(nil).Delete), slug)
}

// GetUserSegments mocks base method.
func (m *MockAvitoSegment) GetUserSegments(userID int) ([]models.Segment, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserSegments", userID)
	ret0, _ := ret[0].([]models.Segment)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserSegments indicates an expected call of GetUserSegments.
func (mr *MockAvitoSegmentMockRecorder) GetUserSegments(userID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserSegments", reflect.TypeOf((*MockAvitoSegment)(nil).GetUserSegments), userID)
}

// MockAvitoUser is a mock of AvitoUser interface.
type MockAvitoUser struct {
	ctrl     *gomock.Controller
	recorder *MockAvitoUserMockRecorder
}

// MockAvitoUserMockRecorder is the mock recorder for MockAvitoUser.
type MockAvitoUserMockRecorder struct {
	mock *MockAvitoUser
}

// NewMockAvitoUser creates a new mock instance.
func NewMockAvitoUser(ctrl *gomock.Controller) *MockAvitoUser {
	mock := &MockAvitoUser{ctrl: ctrl}
	mock.recorder = &MockAvitoUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAvitoUser) EXPECT() *MockAvitoUserMockRecorder {
	return m.recorder
}

// AddUserToSegmentWithTTL mocks base method.
func (m *MockAvitoUser) AddUserToSegmentWithTTL(userID int, segmentSlug string, ttl time.Duration) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUserToSegmentWithTTL", userID, segmentSlug, ttl)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddUserToSegmentWithTTL indicates an expected call of AddUserToSegmentWithTTL.
func (mr *MockAvitoUserMockRecorder) AddUserToSegmentWithTTL(userID, segmentSlug, ttl interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUserToSegmentWithTTL", reflect.TypeOf((*MockAvitoUser)(nil).AddUserToSegmentWithTTL), userID, segmentSlug, ttl)
}

// GenerateUserSegmentHistoryReport mocks base method.
func (m *MockAvitoUser) GenerateUserSegmentHistoryReport(userID, year int, month time.Month) ([]byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateUserSegmentHistoryReport", userID, year, month)
	ret0, _ := ret[0].([]byte)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateUserSegmentHistoryReport indicates an expected call of GenerateUserSegmentHistoryReport.
func (mr *MockAvitoUserMockRecorder) GenerateUserSegmentHistoryReport(userID, year, month interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateUserSegmentHistoryReport", reflect.TypeOf((*MockAvitoUser)(nil).GenerateUserSegmentHistoryReport), userID, year, month)
}

// UpdateUserSegments mocks base method.
func (m *MockAvitoUser) UpdateUserSegments(userID int, addSegments, removeSegments []string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUserSegments", userID, addSegments, removeSegments)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUserSegments indicates an expected call of UpdateUserSegments.
func (mr *MockAvitoUserMockRecorder) UpdateUserSegments(userID, addSegments, removeSegments interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUserSegments", reflect.TypeOf((*MockAvitoUser)(nil).UpdateUserSegments), userID, addSegments, removeSegments)
}
